#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\LinesNumbered
\end_preamble
\use_default_options true
\begin_modules
algorithm2e
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement h
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Analysis of Algorithms
\end_layout

\begin_layout Title
Homework 1
\end_layout

\begin_layout Author
Miguel A.
 Montoya Z.
 (A01226045)
\end_layout

\begin_layout Date
August 23, 2017
\end_layout

\begin_layout Enumerate
Demonstrations
\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Using approximation by integrals we can get both, the upper and lower bound.
 We need to remember that
\begin_inset Formula 
\[
\int_{m}^{n+1}f(x)dx\leq\sum_{k=m}^{n}f(k)\leq\int_{m-1}^{n}f(x)dx
\]

\end_inset

We can start counting from k=2, and add 1
\begin_inset Formula 
\[
\sum_{k=1}^{n}\frac{1}{k^{2}}=1+\sum_{k=2}^{n}\frac{1}{k^{2}}\leq1+\int_{1}^{n}\frac{dx}{x^{2}}=1-\frac{1}{n}+1=2-\frac{1}{n}\leq2
\]

\end_inset


\begin_inset Formula 
\[
\sum_{k=1}^{n}\frac{1}{k^{2}}\leq2-\frac{1}{n}\leq2
\]

\end_inset


\end_layout

\begin_layout Enumerate
Using linearity 
\begin_inset Formula 
\[
\sum_{k=1}^{n}\mathcal{O}(f_{k}(i))=\sum_{k=1}^{n}c_{k}(f_{k}(i))=c_{1}(f_{k}(1))+c_{2}(f_{k}(2))+\ldots+c_{n}(f_{k}(n))
\]

\end_inset


\begin_inset Formula 
\[
\textrm{If we take }c_{max}\left\{ 1\leq k\leq n\right\} \textrm{ then }\sum_{k=1}^{n}c_{k}(f_{k}(i))\leq c_{max}\left(\sum_{k=1}^{n}f_{k}(i)\right)=\mathcal{O}\left(\sum_{k=1}^{n}f_{k}(i)\right)
\]

\end_inset


\end_layout

\begin_layout Enumerate
When n = 1
\begin_inset Formula 
\[
1^{2}=\frac{1(1+1)(2*1+1)}{6}=1
\]

\end_inset

Assumme its true for k
\begin_inset Formula 
\[
1^{2}+1^{2}+\ldots+k^{2}=\frac{k(1+k)(2k+1)}{6}
\]

\end_inset

Prove for k+1
\begin_inset Formula 
\[
1^{2}+1^{2}+\ldots+k^{2}+(k+1)^{2}=\frac{(k+1)(1+(k+1))(2(k+1)+1)}{6}
\]

\end_inset


\begin_inset Formula 
\[
1^{2}+1^{2}+\ldots+k^{2}+(k+1)^{2}=\frac{(k+1)(k+2)(2k+3)}{6}
\]

\end_inset


\begin_inset Formula 
\[
\frac{k(1+k)(2k+1)}{6}+(k+1)^{2}=\frac{(k+1)(k+2)(2k+3)}{6}
\]

\end_inset


\begin_inset Formula 
\[
\frac{k(1+k)(2k+1)}{6}+\frac{6(k+1)^{2}}{6}=\frac{(k+1)(k+2)(2k+3)}{6}
\]

\end_inset


\begin_inset Formula 
\[
k(1+k)(2k+1)+6(k+1)^{2}=(k+1)(k+2)(2k+3)
\]

\end_inset


\begin_inset Formula 
\[
(2x^{3}+3x^{2}+x)+(6x^{2}+12x+6)=(2x^{3}+9x^{2}+13x+6)
\]

\end_inset


\begin_inset Formula 
\[
2x^{3}+9x^{2}+13x+6=2x^{3}+9x^{2}+13x+6
\]

\end_inset


\begin_inset Formula 
\[
1=1
\]

\end_inset

Thus, k+1 is true
\end_layout

\begin_layout Enumerate
Recursive solution of plane division
\begin_inset Formula 
\[
P_{n+1}=P_{n}+(n+1)
\]

\end_inset


\begin_inset Formula 
\[
P_{n+1}=P_{n-1}+\left[(n)+(n+1)\right]
\]

\end_inset


\begin_inset Formula 
\[
P_{n+1}=P_{n-2}+\left[(n-1)+(n)+(n-1)\right]
\]

\end_inset


\begin_inset Formula 
\[
\vdots
\]

\end_inset


\begin_inset Formula 
\[
P_{n+1}=P_{2}+\left[3+\ldots+P_{n-1}+(n)+(n-1)\right]
\]

\end_inset


\begin_inset Formula 
\[
P_{n+1}=P_{1}+\left[2+3+\ldots+P_{n-1}+(n)+(n-1)\right]
\]

\end_inset


\begin_inset Formula 
\[
P_{n+1}=P_{0}+\left[1+2+3+\ldots+P_{n-1}+(n)+(n-1)\right]
\]

\end_inset


\begin_inset Formula 
\[
P_{n+1}=1+\left[1+2+3+\ldots+P_{n-1}+(n)+(n-1)\right]=1+\frac{(n+1)(n+2)}{2}
\]

\end_inset

Thus
\begin_inset Formula 
\[
P_{n}=1+\frac{n(n+1)}{2}=\frac{n^{2}+n+2}{2}
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Comb sort
\end_layout

\begin_deeper
\begin_layout Enumerate
Count
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Algorithm

\series bold
def combsort(A): 
\end_layout

\begin_layout Algorithm
gap = len(A) 
\begin_inset Formula $c_{1}$
\end_inset


\end_layout

\begin_layout Algorithm
sorted = False 
\begin_inset Formula $c_{2}$
\end_inset


\end_layout

\begin_layout Algorithm
shrinkFactor = 1.3 
\begin_inset Formula $c_{3}$
\end_inset


\end_layout

\begin_layout Algorithm

\series bold
if
\series default
 gap < 2: 
\begin_inset Formula $c_{4}$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\qquad$
\end_inset


\series bold
return
\series default

\begin_inset Formula $c_{5}$
\end_inset


\end_layout

\begin_layout Algorithm

\series bold
while 
\series default
!sorted: 
\begin_inset Formula $c_{6}(i+1)$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\qquad$
\end_inset

gap = floor(int(gap/shrinkFactor)) 
\begin_inset Formula $c_{7}i$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\qquad$
\end_inset


\series bold
if 
\series default
gap > 1
\begin_inset Formula $c_{8}i$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\qquad$
\end_inset


\begin_inset Formula $\qquad$
\end_inset

sorted = False 
\begin_inset Formula $c_{9}i$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\qquad$
\end_inset


\series bold
else 
\series default

\begin_inset Formula $c_{10}i$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\qquad$
\end_inset


\begin_inset Formula $\qquad$
\end_inset

gap = 1 
\begin_inset Formula $c_{11}i$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\qquad$
\end_inset


\begin_inset Formula $\qquad$
\end_inset

sorted = True 
\begin_inset Formula $c_{12}i$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\qquad$
\end_inset

k = 0 
\begin_inset Formula $c_{13}i$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\qquad$
\end_inset


\series bold
while
\series default
 k + gap < len(A): 
\begin_inset Formula $c_{14}\sum_{j=1}^{i}(N-\lfloor\frac{N}{1.3^{i}}\rfloor)+1$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\qquad$
\end_inset


\begin_inset Formula $\qquad$
\end_inset


\series bold
if 
\series default
A[i] > A[i + gap]: 
\begin_inset Formula $c_{15}\sum_{j=1}^{i}(N-\lfloor\frac{N}{1.3^{i}}\rfloor)$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\qquad$
\end_inset


\begin_inset Formula $\qquad$
\end_inset


\begin_inset Formula $\qquad$
\end_inset

A[i], A[i + gap] = A[i + gap], A[i] 
\begin_inset Formula $c_{16}\sum_{j=1}^{i}(N-\lfloor\frac{N}{1.3^{i}}\rfloor)$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\qquad$
\end_inset


\begin_inset Formula $\qquad$
\end_inset


\begin_inset Formula $\qquad$
\end_inset

sorted = False 
\begin_inset Formula $c_{17}\sum_{j=1}^{i}(N-\lfloor\frac{N}{1.3^{i}}\rfloor)$
\end_inset


\end_layout

\begin_layout Algorithm
\begin_inset Formula $\qquad$
\end_inset


\begin_inset Formula $\qquad$
\end_inset

k += 1 
\begin_inset Formula $c_{18}\sum_{j=1}^{i}(N-\lfloor\frac{N}{1.3^{i}}\rfloor)$
\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

i = Number of times the gap is going to be decreased.
 
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Enumerate
Cases
\end_layout

\begin_deeper
\begin_layout Enumerate
Worst case: Numbers are sorted, in reverse.
 It will make the comparison and swap for every number 
\begin_inset Formula $\mathcal{O}(n^{2})$
\end_inset


\end_layout

\begin_layout Enumerate
Average case: Numbers are randomized first, then processed.
\end_layout

\begin_layout Enumerate
Best case: Numbers are ordered.
 It never makes the comparison nor the swap.
 
\begin_inset Formula $\varTheta(n\,log(n))$
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Correctness
\begin_inset Formula 
\[
\textrm{The loop invariance for this algorithm is: }\textrm{for every element in}\:i,\:i+gap\textrm{ should be }>i
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Book's exercises
\end_layout

\begin_deeper
\begin_layout Enumerate
Cormen
\end_layout

\begin_deeper
\begin_layout Enumerate
Use merge sort (Which is 
\begin_inset Formula $\Theta(n\,lg(n))$
\end_inset

 and the following algorithm:
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Algorithm
Use Merge Sort to sort array in 
\begin_inset Formula $\Theta(n\,lg(n))$
\end_inset


\end_layout

\begin_layout Algorithm
leftP = 0
\end_layout

\begin_layout Algorithm
rightP = n-1
\end_layout

\begin_layout Algorithm

\series bold
while 
\series default
i < j:
\end_layout

\begin_layout Algorithm
\begin_inset Formula $\qquad$
\end_inset


\series bold
if 
\series default
A[i] + A[j] = S: //If the elements have been found
\end_layout

\begin_layout Algorithm
\begin_inset Formula $\qquad$
\end_inset


\begin_inset Formula $\qquad$
\end_inset


\series bold
return 
\series default
True
\end_layout

\begin_layout Algorithm
\begin_inset Formula $\qquad$
\end_inset


\series bold
if
\series default
 A[i] + A[j] < S: //If smaller, increase (Move right leftP)
\end_layout

\begin_layout Algorithm
\begin_inset Formula $\qquad$
\end_inset


\begin_inset Formula $\qquad$
\end_inset

i++
\end_layout

\begin_layout Algorithm
\begin_inset Formula $\qquad$
\end_inset


\series bold
if 
\series default
A[i] + A[j] > S: //If bigger, decrease (Move left rightP)
\end_layout

\begin_layout Algorithm
\begin_inset Formula $\qquad$
\end_inset


\begin_inset Formula $\qquad$
\end_inset

j—
\end_layout

\begin_layout Algorithm

\series bold
return
\series default
 False
\end_layout

\end_inset

This algorithm runs at most 
\begin_inset Formula $\mathcal{O}(n)$
\end_inset

, given that the worst cas scenario is to go trough every element, decreasing
 n by 1 at each step.
 This leaves the time complexity to the merge sort.
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $2^{n+1}=\mathcal{O}(2^{n})$
\end_inset

 and 
\begin_inset Formula $2^{2n}=\mathcal{O}(2^{n})$
\end_inset


\begin_inset Formula 
\[
2^{n+1}=2^{n}*2\leq c*2^{n}=\mathcal{O}(2^{n})\textrm{. So }2^{n+1}=\mathcal{O}(2^{n})\textrm{ if }2\leq c
\]

\end_inset


\begin_inset Formula 
\[
2^{2n}=2^{n}*2^{n}\leq c*2^{n}=\mathcal{O}(2^{n})\textrm{. For that to be true }2^{n}\leq c\mathscr{\textrm{ but }}c\textrm{ is a constant}
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Dasgupta
\begin_inset Formula 
\[
\textrm{Sum of nodes at each level: }1+d+d^{2}+d^{3}+\ldots d^{h}=\sum\frac{d^{h+1}-1}{d-1}
\]

\end_inset


\begin_inset Formula 
\[
\textrm{The nodes of the d-tree, when counting to }d^{h+1}=n(d-1)+1
\]

\end_inset


\begin_inset Formula 
\[
\textrm{Then }d^{h+1}\geq n+1
\]

\end_inset


\begin_inset Formula 
\[
log(d^{h+1})\geq log(n+1)
\]

\end_inset


\begin_inset Formula 
\[
(h+1)log(d)\geq log(n+1)
\]

\end_inset


\begin_inset Formula 
\[
(h+1)log(d)\geq log(n)
\]

\end_inset


\begin_inset Formula 
\[
h\geq\frac{log(n)}{log(d)}\rightarrow h=\Omega\left(\frac{log(n)}{log(d)}\right)\textrm{ Thus, proving the depth}
\]

\end_inset


\begin_inset Formula 
\[
h\geq log_{d}(n)\textrm{ This is the minimum depth}
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Asymptotic bounds
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $T(n)=\begin{cases}
T\left(\lfloor\frac{n}{2}\rfloor\right)+T\left(\frac{2n}{4}\right) & \textrm{if }n\geq4\\
4 & \textrm{if }n<4
\end{cases}$
\end_inset


\begin_inset Formula 
\[
\textrm{Note: }\frac{2n}{4}=\frac{n}{2}\textrm{ and assume }n=2^{b}
\]

\end_inset


\begin_inset Formula 
\[
\textrm{Then }2T\left(\frac{n}{2}\right)\textrm{ if }n\geq4
\]

\end_inset


\begin_inset Formula 
\[
\textrm{Guess: }T(n)=\mathcal{O}(n\,log(n))
\]

\end_inset


\begin_inset Formula 
\[
\textrm{Bound holds because we assume }\frac{n}{2}\leq n
\]

\end_inset


\begin_inset Formula 
\[
T(\frac{n}{2})\leq c\frac{n}{2}\,lg(\frac{n}{2})
\]

\end_inset


\begin_inset Formula 
\[
\textrm{Then }T(n)\leq2(c\frac{n}{2}\,lg(\frac{n}{2}))
\]

\end_inset


\begin_inset Formula 
\[
T(n)\leq cn\,lg(\frac{n}{2})
\]

\end_inset


\begin_inset Formula 
\[
T(n)\leq cn\,\left(lg(n)-lg(2)\right)
\]

\end_inset


\begin_inset Formula 
\[
T(n)\leq cn\,lg(n)
\]

\end_inset


\begin_inset Formula 
\[
T(n)=\mathcal{O}(n\,lg(n))
\]

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $T(n)=\begin{cases}
T\left(\frac{n}{2}\right)+T\left(\frac{n}{5}\right)+\sqrt{n} & \textrm{if }n\geq4\\
4 & \textrm{if }n<4
\end{cases}$
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /home/miguel/Downloads/unnamed01.png
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

Because the properties of the Tree Method, we can see that the biggest number
 will be 
\begin_inset Formula $c\sqrt{n}$
\end_inset

.
 So we can try to probe that the time complexity will be 
\begin_inset Formula $\mathcal{O}(\sqrt{n}lg(n))$
\end_inset

.
 
\end_layout

\begin_layout Enumerate
\begin_inset Formula $T(n)=\begin{cases}
2T\left(\frac{n}{2}\right)+g(n) & \textrm{if }n\geq2\\
1 & \textrm{if }n=1
\end{cases}\mathscr{\textrm{ is T(n)=O(n) if g(n)=o(n)}}$
\end_inset


\begin_inset Formula 
\[
\textrm{Following the second case of the master method: }a=2,\:b=2\textrm{ and }d=1\textrm{ (Because: }o(n)=o(n^{1})\textrm{)}
\]

\end_inset


\begin_inset Formula 
\[
T(n)=\mathcal{O}(n^{1}log(n))
\]

\end_inset


\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
So no, T(n) is not equal to O(n).
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit

\begin_inset Separator latexpar
\end_inset


\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
(Also, because the nature of little oh, it always should be bigger than
 the function.
 A regular O can be equal)
\end_layout

\end_deeper
\end_deeper
\end_body
\end_document
